//package Algorithms;

import java.util.Iterator;

import edu.princeton.cs.algs4.Point2D;
import edu.princeton.cs.algs4.Queue;
import edu.princeton.cs.algs4.RectHV;
import edu.princeton.cs.algs4.SET;

public class PointSET {

	private SET<Point2D> pset;

	public PointSET() {
		pset = new SET<Point2D>();
	}

	public boolean isEmpty() {
		return pset.isEmpty();
	}

	public int size() {
		return pset.size();
	}

	public void insert(Point2D p) {
		if (!pset.contains(p)) {
			pset.add(p);
		}
	}

	public boolean contains(Point2D p) {
		return pset.contains(p);
	}

	public void draw() {
		Iterator it = pset.iterator();

		while (it.hasNext()) {
			((Point2D) (it.next())).draw();
		}
	}

	public Iterable<Point2D> range(RectHV rect) {
		Queue<Point2D> insidePoints = new Queue<Point2D>();
		Iterator it = pset.iterator();

		while (it.hasNext()) {
			Point2D cPoint = (Point2D) it.next();

			if (rect.contains(cPoint)) {
				insidePoints.enqueue(cPoint);
			}
		}

		return insidePoints;
	}

	public Point2D nearest(Point2D p) {
		Point2D nearest = null;
		double minDist = Double.MAX_VALUE;
		Iterator it = pset.iterator();

		while (it.hasNext()) {
			Point2D cPoint = (Point2D) it.next();
			double cDist = p.distanceTo(cPoint);

			if (p.distanceTo(cPoint) < minDist) {
				nearest = cPoint;
				minDist = cDist;
			}
		}

		return nearest;
	}

}
/*
 * import java.util.ArrayList; import edu.princeton.cs.algs4.Point2D; import
 * edu.princeton.cs.algs4.RectHV; import edu.princeton.cs.algs4.SET; import
 * edu.princeton.cs.algs4.StdDraw;
 * 
 * public class PointSET {
 * 
 * private SET<Point2D> pointSet;
 * 
 * // construct an empty set of points public PointSET() { pointSet = new
 * SET<Point2D>(); }
 * 
 * // is the set empty? public boolean isEmpty() { return pointSet.size() == 0;
 * }
 * 
 * public int size() { return pointSet.size(); }
 * 
 * // add the point to the set (if it is not already in the set) public void
 * insert(Point2D p) { if (p == null) throw new IllegalArgumentException(); if
 * (!pointSet.contains(p)) pointSet.add(p); }
 * 
 * // does the set contain point p? public boolean contains(Point2D p) { if (p
 * == null) throw new IllegalArgumentException(); return pointSet.contains(p); }
 * 
 * // draw all points to standard draw public void draw() { StdDraw.clear();
 * StdDraw.setPenColor(StdDraw.BLACK); StdDraw.setPenRadius(0.01);
 * 
 * for (Point2D point : pointSet) { point.draw(); } }
 * 
 * // all points that are inside the rectangle (or on the boundary) public
 * Iterable<Point2D> range(RectHV rect) { if (rect == null) throw new
 * IllegalArgumentException(); ArrayList<Point2D> pointsIn = new ArrayList<>();
 * 
 * for (Point2D point : pointSet) { if (rect.contains(point))
 * pointsIn.add(point); } return pointsIn; }
 * 
 * // a nearest neighbor in the set to point p; null if the set is empty public
 * Point2D nearest(Point2D p) { if (p == null) throw new
 * IllegalArgumentException(); if (pointSet.isEmpty()) return null; Point2D
 * nearest = null; for (Point2D curPoint : pointSet) { if (nearest == null) {
 * nearest = curPoint; continue; } if (curPoint.distanceSquaredTo(p) <
 * nearest.distanceSquaredTo(p)) nearest = curPoint; } return nearest; }
 * 
 * public static void main(String[] args) { PointSET temp = new PointSET();
 * Point2D p = new Point2D(0.5, 0.5); temp.insert(p);
 * System.out.println(temp.size()); System.out.println(temp.pointSet);
 * 
 * } }
 */