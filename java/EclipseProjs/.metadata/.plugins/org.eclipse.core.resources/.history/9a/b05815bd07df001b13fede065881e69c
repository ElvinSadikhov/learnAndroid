import java.util.ArrayList;
import java.util.Scanner;

public class Sorting {

	private static ArrayList<Integer> createList(int len) {

		ArrayList<Integer> list = new ArrayList<Integer>();
		for (int i = 0; i < len; i++) {
			list.add((int) (Math.random() * 100));
		}
		return list;
	}

	private static void swap(ArrayList<Integer> list, int index1, int index2) {
		int temp = list.get(index1);
		list.set(index1, list.get(index2));
		list.set(index2, temp);
	}

	static ArrayList<Integer> bubbleSort(ArrayList<Integer> list) {
		for (int i = 0; i < list.size() - 1; i++) {
			for (int j = 0; j < list.size() - 1 - i; j++) {
				if (list.get(j) < list.get(j + 1)) {
					swap(list, j, j + 1);
				}
			}
		}

		return list;
	}

	static ArrayList<Integer> stoneSort(ArrayList<Integer> list) {
		for (int i = 1; i < list.size(); i++) {
			for (int j = list.size() - 1; j >= i; j--) {
				if (list.get(j) > list.get(j - 1)) {
					swap(list, j, j - 1);
				}
			}
		}
		return list;
	}

	static ArrayList<Integer> selectionSort(ArrayList<Integer> list) {
		for (int i = 0; i < list.size(); i++) {
			int indexOfMax = i;
			for (int j = i; j < list.size(); j++) {
				if (list.get(j) > list.get(indexOfMax)) {
					indexOfMax = j;
				}
			}
			swap(list, indexOfMax, i);
		}
		return list;
	}

	static Object quickSort(ArrayList<Integer> list, int nStart, int nEnd) {
		if (nStart < nEnd) {
			int L = nStart;
			int R = nEnd;
			int M = (L + R) / 2;
			while (L < R - 1) {
				while (list.get(L) < list.get(M))
					L += 1;
				while (list.get(R) > list.get(M))
					R -= 1;
			}
			if (list.get(L) > list.get(R)) {
				swap(list, L, R);
			}
			return quickSort(list, L, nEnd);
			return quickSort(list, nStart, R);
		}
	}

	public static void main(String[] args) {

		Scanner in = new Scanner(System.in);
		System.out.print("Type length of the list: ");
		int len = in.nextInt();

		ArrayList<Integer> list = createList(len);
		System.out.println("\nInitial list: " + list);
		System.out.println("BubbleSort: " + bubbleSort(list));

		list = createList(len);
		System.out.println("\nInitial list: " + list);
		System.out.println("StoneSort: " + stoneSort(list));

		list = createList(len);
		System.out.println("\nInitial list: " + list);
		System.out.println("SelectionSort: " + selectionSort(list));

		list = createList(len);
		System.out.println("\nInitial list: " + list);
		System.out.println("SelectionSort: " + quickSort(list));

	}

}
