//When an error occurs, Java will normally stop and generate an error message. The technical term for this is: Java will throw an exception (throw an error).

//Java try and catch
- The try statement allows you to define a block of code to be tested for errors while it is being executed.

- The catch statement allows you to define a block of code to be executed, if an error occurs in the try block.

- The try and catch keywords come in pairs:

try {
  //  Block of code to try
}
catch(Exception e) { // we can print that e value (String of exception)
  //  Block of code to handle errors
}

//The finally statement lets you execute code, after try...catch, regardless of the result:

public class Main {
  public static void main(String[] args) {
    try {
      int[] myNumbers = {1, 2, 3};
      System.out.println(myNumbers[10]);
    } catch (Exception e) {
      System.out.println("Something went wrong.");
    } finally {
      System.out.println("The 'try catch' is finished.");
    }
  }
}
 
- The output will be:

Something went wrong.
The 'try catch' is finished.

//The throw keyword (throw new ...)
- The throw statement allows you to create a custom error.

Example - Throw an exception if age is below 18 (print "Access denied"). If age is 18 or older, print "Access granted":

public class Main {
  static void checkAge(int age) {
    if (age < 18) {
      throw new ArithmeticException("Access denied - You must be at least 18 years old.");
    }
    else {
      System.out.println("Access granted - You are old enough!");
    }
  }

  public static void main(String[] args) {
    checkAge(15); // Set age to 15 (which is below 18...)
  }
}